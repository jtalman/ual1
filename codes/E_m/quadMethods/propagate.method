// compromise_quad file
void propagate(UAL::Probe& probe)
{
std::cout << __FILE__ << " enter compromise_quad propagate\n";
std::cout << "line:     " << __LINE__ << "\n";
std::cout << "m_l:      " << m_l      << "\n";
std::cout << "vD:       " << vD       << "\n";
std::cout << "m_q:      " << m_q      << "\n";
std::cout << "m_ehd:    " << m_ehd    << "\n";
std::cout << "m_mhd:    " << m_mhd    << "\n";
std::cout << "m_el:     " << m_el     << "\n";
std::cout << "m_ml:     " << m_ml     << "\n";
std::cout << "m_eq:     " << m_eq     << "\n";
std::cout << "m_mq:     " << m_mq     << "\n";
std::cout << "m_L:      " << m_L      << "\n";

 PAC::Bunch& bunch      = static_cast<PAC::Bunch&>(probe);
//std::cout << "line  " << __LINE__ << "\n";
 tofD                   = m_l/vD;
//std::cout << "line  " << __LINE__ << "\n";
// PacElemMultipole* mult;
//std::cout << "line  " << __LINE__ << "\n";
// double q               = data[2];
 for(int ip = 1; ip < bunch.size(); ip++) {
  PAC::Position& pacP   = bunch[ip].getPosition();
  pacPmy                = &pacP;
  passDrift( m_l/2., tofD/2. );
  pacP[1]              -= m_q*pacP[0];
  pacP[3]              += m_q*pacP[2];
  #include"compromise_quadSpinEvolve"
  passDrift( m_l/2., tofD/2. );
 }
 tofDT                 +=tofD;
 sDT                   += m_l;
std::cout << "line:     " << __LINE__ << "\n";
std::cout << __FILE__ << " leave compromise_quad propagate\n";
}
